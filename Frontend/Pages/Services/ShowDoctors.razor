@page "/Individual/Medical-Practitioners/{email}"

@using Common.ApiResponseModels.PatientResponseModels;
@using Common.ApiRequestModels.PatientRequestModels;
@using BootstrapBlazor.Components;

@inject HttpClient http;
@inject IConfiguration Configuration;
@inject NavigationManager NavigationManager;

<PageTitle>Swasthya - Individual Login</PageTitle>

<div class="wrapper-div">
    <div class="wrapper-div-upper">
        <h1 class="app-name">
            swasthya
        </h1>
    </div>

    <div class="wrapper-div-middle">
        <div class="form-box">
            <EditForm Model="addDoctor" OnValidSubmit="AddDoctor">
                <DataAnnotationsValidator />
                <div class="form-element">
                    <label for="DoctorSwasthyaId">Doctor Swasthya Id</label>
                    <InputText id="DoctorSwasthyaId" @bind-Value="addDoctor.doctorSwasthyaId" class="form-control"></InputText>
                </div>
                <button class="form-button" type="submit">Add Doctor</button>
                <ValidationSummary />
            </EditForm>
        </div>
        <div class="patients">
            Doctors
        </div>

        @if (patient.Doctors != null)
        {
            foreach (var doctor in patient.Doctors)
            {
                <Card class="doctor-details">
                    <BodyTemplate>
                        <p class="card-text">
                            Name: @doctor.Name <br>
                            Email: @doctor.Email <br>
                            Phone Number: @doctor.PhoneNumber <br>
                            SwasthyaId: @doctor.SwasthyaId <br>
                        </p>
                    </BodyTemplate>
                </Card>
            }
        }
    </div>
</div>

@code {
    private PatientResponseModel patient;
    private PermitDoctorRequest addDoctor;
    private string baseUri;
    private string patientEmail;
    private string errorMessage;

    [Parameter]
    public string email { get; set; }

    protected override async Task OnInitializedAsync()
    {
        patient = new PatientResponseModel();
        addDoctor = new PermitDoctorRequest();
        this.baseUri = Configuration["BackendUri"];
        await GetPatient();
    }

    private async Task GetPatient()
    {
        var uriFormat = this.baseUri + @"/api/Patient/getPatient/{0}";
        var getPatientUri = string.Format(uriFormat, Uri.EscapeDataString(email));

        try
        {

            var response = await http.GetFromJsonAsync<PatientResponseModel>(getPatientUri);

            if (response != null)
            {
                this.patient = response;
            }
            else
            {
                errorMessage = "An error occurred. Please try again.";
            }

        }

        catch (Exception ex)
        {
            errorMessage = $"An error occurred : {ex.Message}";
        }
    }

    private async Task AddDoctor()
    {
        addDoctor.email = email;
        var uriFormat = this.baseUri + "/api/Patient/permitDoctor";
        try
        {
            var response = await http.PostAsJsonAsync<PermitDoctorRequest>(uriFormat, addDoctor);

            if (response.IsSuccessStatusCode)
            {
                StateHasChanged();
            }
            else
            {
                errorMessage = "An error occurred. Please try again.";
            }

        }

        catch (Exception ex)
        {
            errorMessage = $"An error occurred : {ex.Message}";
        }

        StateHasChanged();
    }
}